useful commands:
git add .
git commit -m "..."
git push
git status

  -----------------------------------
  <head>
    <link rel="stylesheet" type="text/css" href="index.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Choose file</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="index.js"></script>
    <script type="text/javascript" src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script type="text/javascript">
<<<<<<< HEAD
=======

        window.html2canvas = html2canvas;
        window.jsPDF = window.jspdf.jsPDF;

    </script>

>>>>>>> 1e3f86db33fd47ee9bf6ec44c977cfeeee22f7d8

        window.html2canvas = html2canvas;
        window.jsPDF = window.jspdf.jsPDF;

    </script>
   
</head>

<input type="file" id="imageInput" accept="image/*">
    <button>Submit</button>




//html
<h2>Import an Image</h2>
                <label class="button-87" for="input-file">Import Image</label>
            <input type="file" id="input-file" accept="image/jpg, image/png, image/jpeg">
                <div id="image-container">
                    <canvas id="canvas"></canvas>
                </div>
                <div class="controls">
                    <div class="control-group">
                        <label for="brightness">Brightness</label>
                        <input type="range" id="brightness" name="brightness" min="-100" max="100" value="0">
                        <span id="brightness-value">0</span>
                    </div>
                    <div class="control-group">
                        <label for="contrast">Contrast</label>
                        <input type="range" id="contrast" name="contrast" min="-100" max="100" value="0">
                        <span id="contrast-value">0</span>
                    </div>
                    <button type="button" id="resetButton">Reset</button>
                    <button type="button" id="downloadButton">Download</button>
                </div>
            </div>
        </form>
    </div>

    const fileInput = document.getElementById('container');
const selectedBanner = document.getElementById('output');

fileInput.addEventListener('change', () => {
  const files = fileInput.files;
  const filesArr = Array.prototype.slice.call(files);
  filesArr.forEach(function (f) {
    if (!f.type.match("image.*")) {
      return;
    }
    storedFiles.push(f);

    var reader = new FileReader();
    reader.onload = function (e) {
      var html =
        '<img src="' +
        e.target.result +
        "\" data-file='" +
        f.name +
        "alt='Category Image' >";
      selectedBanner.innerHTML = html;
    };
    reader.readAsDataURL(f);
  });
});

//js
function displayImage(event) {
  const file = event.target.files[0];
  if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
          const output = document.getElementById('output');
          output.src = e.target.result;
      };
      reader.readAsDataURL(file);
  }
}

function convertToPDF() {
  const { jsPDF } = window.jspdf;
  const img = document.getElementById('output');
  const pdf = new jsPDF();
  if (img.src) {
      pdf.addImage(img.src, 'JPEG', 15, 40, 180, 160);
      pdf.save('download.pdf');
  } else {
      alert("Please upload an image first.");
  }
}

//imagetuning.javascript

document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const uploadInput = document.getElementById('upload');
    const brightnessInput = document.getElementById('brightness');
    const contrastInput = document.getElementById('contrast');
    const resetButton = document.getElementById('resetButton');
    const downloadButton = document.getElementById('downloadButton');

    const brightnessValue = document.getElementById('brightness-value');
    const contrastValue = document.getElementById('contrast-value');
    let originalImage = new Image();
    let imageLoaded = false;

    function applyFilters() {
        if (!imageLoaded) return;

        const brightness = parseInt(brightnessInput.value);
        const contrast = parseInt(contrastInput.value);

        ctx.filter = `
            brightness(${brightness + 100}%)
            contrast(${contrast + 100}%)
        `;

        ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);

        brightnessValue.textContent = brightness;
        contrastValue.textContent = contrast;
    }

    uploadInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                originalImage.onload = function() {
                    canvas.width = originalImage.width;
                    canvas.height = originalImage.height;
                    imageLoaded = true;
                    applyFilters();
                };
                originalImage.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    brightnessInput.addEventListener('input', applyFilters);
    contrastInput.addEventListener('input', applyFilters);

    resetButton.addEventListener('click', () => {
        brightnessInput.value = 0;
        contrastInput.value = 0;
        applyFilters();
    });

    downloadButton.addEventListener('click', () => {
        if (!imageLoaded) return;

        const link = document.createElement('a');
        link.download = 'adjusted-image.png';
        link.href = canvas.toDataURL();
        link.click();
    });
});












async function timer() {
    hide.classList.remove("hide");
  }
  
async function removehide() {
    setTimeout(timer,1000);
  }
  
async function separatePDF() {
    let pages = document.getElementById('pages'); 
    let pagesInput = pages.value.trim(); 
  
    let filename1 = document.getElementById('filename1'); 
    const Namefile1 = filename1.value.trim() || 'separated_pdf_1';

    let filename2 = document.getElementById('filename2'); 
    const Namefile2 = filename2.value.trim() || 'separated_pdf_2';
  
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];
  
    if (!file) {
        alert("Please select a PDF file.");
        return;
    }
  
    if (!pagesInput) {
        alert("Please enter the pages you want to separate.");
        return;
    }

    const pdfData = await file.arrayBuffer();
    const pdfDoc = await PDFLib.PDFDocument.load(pdfData);

    const separatedPdf1 = await PDFLib.PDFDocument.create();
    const separatedPdf2 = await PDFLib.PDFDocument.create();
  
    const selectedPages = pagesInput.split(',').map(num => parseInt(num.trim()));

    if (selectedPages.length !== 2) {
        alert("Please enter exactly two page numbers separated by a comma.");
        return;
    }

    const [Num1, Num2] = selectedPages;

    if (isNaN(Num1) || isNaN(Num2) || Num1 <= 0 || Num1 > pdfDoc.getPageCount() || Num2 <= 0 || Num2 > pdfDoc.getPageCount()) {
        alert("Please enter valid page numbers within the range of the PDF.");
        return;
    }

    // Copy and add the first page
    const [copiedPage1] = await pdfDoc.copyPages(pdfDoc, [Num1 - 1]);
    separatedPdf1.addPage(copiedPage1);

    // Copy and add the second page
    const [copiedPage2] = await pdfDoc.copyPages(pdfDoc, [Num2 - 1]);
    separatedPdf2.addPage(copiedPage2);

    const separatedPdfData1 = await separatedPdf1.save();
    const blob1 = new Blob([separatedPdfData1], { type: 'application/pdf' });
    const downloadLink1 = document.getElementById('downloadLink1');

    const separatedPdfData2 = await separatedPdf2.save();
    const blob2 = new Blob([separatedPdfData2], { type: 'application/pdf' });
    const downloadLink2 = document.getElementById('downloadLink2');

    downloadLink1.style.display = 'block';
    downloadLink1.href = URL.createObjectURL(blob1);
    downloadLink1.download = `${Namefile1}.pdf`;

    downloadLink2.style.display = 'block';
    downloadLink2.href = URL.createObjectURL(blob2);
    downloadLink2.download = `${Namefile2}.pdf`;
}








